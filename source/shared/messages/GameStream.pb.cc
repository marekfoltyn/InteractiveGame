// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameStream.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameStream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBGameStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGameStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBVec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBVec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBonus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBTeam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameStream_2eproto() {
  protobuf_AddDesc_GameStream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameStream.proto");
  GOOGLE_CHECK(file != NULL);
  PBGameStream_descriptor_ = file->message_type(0);
  static const int PBGameStream_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, scoreleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, scoreright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, bonus_),
  };
  PBGameStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGameStream_descriptor_,
      PBGameStream::default_instance_,
      PBGameStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGameStream));
  PBVec2_descriptor_ = file->message_type(1);
  static const int PBVec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, y_),
  };
  PBVec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBVec2_descriptor_,
      PBVec2::default_instance_,
      PBVec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBVec2));
  PBBall_descriptor_ = file->message_type(2);
  static const int PBBall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, playerenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, angularvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, angle_),
  };
  PBBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBall_descriptor_,
      PBBall::default_instance_,
      PBBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBall));
  PBPlayer_descriptor_ = file->message_type(3);
  static const int PBPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, speedscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, kickmultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, speedmultiplier_),
  };
  PBPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayer_descriptor_,
      PBPlayer::default_instance_,
      PBPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayer));
  PBBonus_descriptor_ = file->message_type(4);
  static const int PBBonus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBonus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBonus, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBonus, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBonus, name_),
  };
  PBBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBonus_descriptor_,
      PBBonus::default_instance_,
      PBBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBonus));
  PBTeam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameStream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGameStream_descriptor_, &PBGameStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBVec2_descriptor_, &PBVec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBall_descriptor_, &PBBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayer_descriptor_, &PBPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBonus_descriptor_, &PBBonus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameStream_2eproto() {
  delete PBGameStream::default_instance_;
  delete PBGameStream_reflection_;
  delete PBVec2::default_instance_;
  delete PBVec2_reflection_;
  delete PBBall::default_instance_;
  delete PBBall_reflection_;
  delete PBPlayer::default_instance_;
  delete PBPlayer_reflection_;
  delete PBBonus::default_instance_;
  delete PBBonus_reflection_;
}

void protobuf_AddDesc_GameStream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameStream.proto\"\301\001\n\014PBGameStream\022\016\n\006a"
    "ctive\030\001 \001(\010\022\020\n\010playerId\030\003 \001(\004\022\r\n\005width\030\004"
    " \001(\005\022\016\n\006height\030\005 \001(\005\022\025\n\004ball\030\006 \001(\0132\007.PBB"
    "all\022\031\n\006player\030\007 \003(\0132\t.PBPlayer\022\021\n\tscoreL"
    "eft\030\010 \001(\005\022\022\n\nscoreRight\030\t \001(\005\022\027\n\005bonus\030\n"
    " \003(\0132\010.PBBonus\"\036\n\006PBVec2\022\t\n\001x\030\001 \002(\002\022\t\n\001y"
    "\030\002 \002(\002\"}\n\006PBBall\022\031\n\010position\030\001 \001(\0132\007.PBV"
    "ec2\022\031\n\010velocity\030\002 \001(\0132\007.PBVec2\022\025\n\rplayer"
    "Enabled\030\003 \001(\010\022\027\n\017angularVelocity\030\004 \001(\002\022\r"
    "\n\005angle\030\005 \001(\002\"\263\001\n\010PBPlayer\022\031\n\010position\030\001"
    " \001(\0132\007.PBVec2\022\026\n\005force\030\002 \001(\0132\007.PBVec2\022\014\n"
    "\004name\030\003 \001(\t\022\025\n\004team\030\004 \001(\0162\007.PBTeam\022\022\n\nsp"
    "eedScale\030\005 \001(\002\022\n\n\002id\030\006 \001(\005\022\026\n\016kickMultip"
    "lier\030\007 \001(\002\022\027\n\017speedMultiplier\030\010 \001(\002\"K\n\007P"
    "BBonus\022\n\n\002id\030\001 \001(\005\022\013\n\003res\030\002 \001(\t\022\031\n\010posit"
    "ion\030\003 \001(\0132\007.PBVec2\022\014\n\004name\030\004 \001(\t*\033\n\006PBTe"
    "am\022\007\n\003RED\020\000\022\010\n\004BLUE\020\001", 661);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameStream.proto", &protobuf_RegisterTypes);
  PBGameStream::default_instance_ = new PBGameStream();
  PBVec2::default_instance_ = new PBVec2();
  PBBall::default_instance_ = new PBBall();
  PBPlayer::default_instance_ = new PBPlayer();
  PBBonus::default_instance_ = new PBBonus();
  PBGameStream::default_instance_->InitAsDefaultInstance();
  PBVec2::default_instance_->InitAsDefaultInstance();
  PBBall::default_instance_->InitAsDefaultInstance();
  PBPlayer::default_instance_->InitAsDefaultInstance();
  PBBonus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameStream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameStream_2eproto {
  StaticDescriptorInitializer_GameStream_2eproto() {
    protobuf_AddDesc_GameStream_2eproto();
  }
} static_descriptor_initializer_GameStream_2eproto_;
const ::google::protobuf::EnumDescriptor* PBTeam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeam_descriptor_;
}
bool PBTeam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PBGameStream::kActiveFieldNumber;
const int PBGameStream::kPlayerIdFieldNumber;
const int PBGameStream::kWidthFieldNumber;
const int PBGameStream::kHeightFieldNumber;
const int PBGameStream::kBallFieldNumber;
const int PBGameStream::kPlayerFieldNumber;
const int PBGameStream::kScoreLeftFieldNumber;
const int PBGameStream::kScoreRightFieldNumber;
const int PBGameStream::kBonusFieldNumber;
#endif  // !_MSC_VER

PBGameStream::PBGameStream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameStream)
}

void PBGameStream::InitAsDefaultInstance() {
  ball_ = const_cast< ::PBBall*>(&::PBBall::default_instance());
}

PBGameStream::PBGameStream(const PBGameStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameStream)
}

void PBGameStream::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  playerid_ = GOOGLE_ULONGLONG(0);
  width_ = 0;
  height_ = 0;
  ball_ = NULL;
  scoreleft_ = 0;
  scoreright_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGameStream::~PBGameStream() {
  // @@protoc_insertion_point(destructor:PBGameStream)
  SharedDtor();
}

void PBGameStream::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void PBGameStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGameStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGameStream_descriptor_;
}

const PBGameStream& PBGameStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBGameStream* PBGameStream::default_instance_ = NULL;

PBGameStream* PBGameStream::New() const {
  return new PBGameStream;
}

void PBGameStream::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBGameStream*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(playerid_, width_);
    ZR_(height_, scoreleft_);
    if (has_ball()) {
      if (ball_ != NULL) ball_->::PBBall::Clear();
    }
    scoreright_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_.Clear();
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGameStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 3;
      case 3: {
        if (tag == 24) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ball;
        break;
      }

      // optional .PBBall ball = 6;
      case 6: {
        if (tag == 50) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_player;
        break;
      }

      // repeated .PBPlayer player = 7;
      case 7: {
        if (tag == 58) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_player;
        if (input->ExpectTag(64)) goto parse_scoreLeft;
        break;
      }

      // optional int32 scoreLeft = 8;
      case 8: {
        if (tag == 64) {
         parse_scoreLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoreleft_)));
          set_has_scoreleft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_scoreRight;
        break;
      }

      // optional int32 scoreRight = 9;
      case 9: {
        if (tag == 72) {
         parse_scoreRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoreright_)));
          set_has_scoreright();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bonus;
        break;
      }

      // repeated .PBBonus bonus = 10;
      case 10: {
        if (tag == 82) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bonus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameStream)
  return false;
#undef DO_
}

void PBGameStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameStream)
  // optional bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional uint64 playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional .PBBall ball = 6;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ball(), output);
  }

  // repeated .PBPlayer player = 7;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player(i), output);
  }

  // optional int32 scoreLeft = 8;
  if (has_scoreleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scoreleft(), output);
  }

  // optional int32 scoreRight = 9;
  if (has_scoreright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->scoreright(), output);
  }

  // repeated .PBBonus bonus = 10;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bonus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameStream)
}

::google::protobuf::uint8* PBGameStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameStream)
  // optional bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional uint64 playerId = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional .PBBall ball = 6;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ball(), target);
  }

  // repeated .PBPlayer player = 7;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player(i), target);
  }

  // optional int32 scoreLeft = 8;
  if (has_scoreleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scoreleft(), target);
  }

  // optional int32 scoreRight = 9;
  if (has_scoreright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->scoreright(), target);
  }

  // repeated .PBBonus bonus = 10;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bonus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameStream)
  return target;
}

int PBGameStream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional uint64 playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .PBBall ball = 6;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // optional int32 scoreLeft = 8;
    if (has_scoreleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoreleft());
    }

    // optional int32 scoreRight = 9;
    if (has_scoreright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoreright());
    }

  }
  // repeated .PBPlayer player = 7;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  // repeated .PBBonus bonus = 10;
  total_size += 1 * this->bonus_size();
  for (int i = 0; i < this->bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGameStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGameStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGameStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGameStream::MergeFrom(const PBGameStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_ball()) {
      mutable_ball()->::PBBall::MergeFrom(from.ball());
    }
    if (from.has_scoreleft()) {
      set_scoreleft(from.scoreleft());
    }
    if (from.has_scoreright()) {
      set_scoreright(from.scoreright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGameStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGameStream::CopyFrom(const PBGameStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGameStream::IsInitialized() const {

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->player())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bonus())) return false;
  return true;
}

void PBGameStream::Swap(PBGameStream* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(playerid_, other->playerid_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(ball_, other->ball_);
    player_.Swap(&other->player_);
    std::swap(scoreleft_, other->scoreleft_);
    std::swap(scoreright_, other->scoreright_);
    bonus_.Swap(&other->bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGameStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGameStream_descriptor_;
  metadata.reflection = PBGameStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBVec2::kXFieldNumber;
const int PBVec2::kYFieldNumber;
#endif  // !_MSC_VER

PBVec2::PBVec2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBVec2)
}

void PBVec2::InitAsDefaultInstance() {
}

PBVec2::PBVec2(const PBVec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBVec2)
}

void PBVec2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBVec2::~PBVec2() {
  // @@protoc_insertion_point(destructor:PBVec2)
  SharedDtor();
}

void PBVec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBVec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBVec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBVec2_descriptor_;
}

const PBVec2& PBVec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBVec2* PBVec2::default_instance_ = NULL;

PBVec2* PBVec2::New() const {
  return new PBVec2;
}

void PBVec2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBVec2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBVec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBVec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBVec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBVec2)
  return false;
#undef DO_
}

void PBVec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBVec2)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBVec2)
}

::google::protobuf::uint8* PBVec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBVec2)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBVec2)
  return target;
}

int PBVec2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBVec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBVec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBVec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBVec2::MergeFrom(const PBVec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBVec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBVec2::CopyFrom(const PBVec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBVec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBVec2::Swap(PBVec2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBVec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBVec2_descriptor_;
  metadata.reflection = PBVec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBall::kPositionFieldNumber;
const int PBBall::kVelocityFieldNumber;
const int PBBall::kPlayerEnabledFieldNumber;
const int PBBall::kAngularVelocityFieldNumber;
const int PBBall::kAngleFieldNumber;
#endif  // !_MSC_VER

PBBall::PBBall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBall)
}

void PBBall::InitAsDefaultInstance() {
  position_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
  velocity_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
}

PBBall::PBBall(const PBBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBall)
}

void PBBall::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  playerenabled_ = false;
  angularvelocity_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBall::~PBBall() {
  // @@protoc_insertion_point(destructor:PBBall)
  SharedDtor();
}

void PBBall::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void PBBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBall_descriptor_;
}

const PBBall& PBBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBBall* PBBall::default_instance_ = NULL;

PBBall* PBBall::New() const {
  return new PBBall;
}

void PBBall::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBBall*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(playerenabled_, angle_);
    if (has_position()) {
      if (position_ != NULL) position_->::PBVec2::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::PBVec2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBVec2 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // optional .PBVec2 velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerEnabled;
        break;
      }

      // optional bool playerEnabled = 3;
      case 3: {
        if (tag == 24) {
         parse_playerEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playerenabled_)));
          set_has_playerenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_angularVelocity;
        break;
      }

      // optional float angularVelocity = 4;
      case 4: {
        if (tag == 37) {
         parse_angularVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angularvelocity_)));
          set_has_angularvelocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_angle;
        break;
      }

      // optional float angle = 5;
      case 5: {
        if (tag == 45) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBall)
  return false;
#undef DO_
}

void PBBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBall)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .PBVec2 velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->velocity(), output);
  }

  // optional bool playerEnabled = 3;
  if (has_playerenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->playerenabled(), output);
  }

  // optional float angularVelocity = 4;
  if (has_angularvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angularvelocity(), output);
  }

  // optional float angle = 5;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBall)
}

::google::protobuf::uint8* PBBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBall)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .PBVec2 velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->velocity(), target);
  }

  // optional bool playerEnabled = 3;
  if (has_playerenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->playerenabled(), target);
  }

  // optional float angularVelocity = 4;
  if (has_angularvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angularvelocity(), target);
  }

  // optional float angle = 5;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBall)
  return target;
}

int PBBall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBVec2 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .PBVec2 velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional bool playerEnabled = 3;
    if (has_playerenabled()) {
      total_size += 1 + 1;
    }

    // optional float angularVelocity = 4;
    if (has_angularvelocity()) {
      total_size += 1 + 4;
    }

    // optional float angle = 5;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBall::MergeFrom(const PBBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::PBVec2::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::PBVec2::MergeFrom(from.velocity());
    }
    if (from.has_playerenabled()) {
      set_playerenabled(from.playerenabled());
    }
    if (from.has_angularvelocity()) {
      set_angularvelocity(from.angularvelocity());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBall::CopyFrom(const PBBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBall::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void PBBall::Swap(PBBall* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(playerenabled_, other->playerenabled_);
    std::swap(angularvelocity_, other->angularvelocity_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBall_descriptor_;
  metadata.reflection = PBBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayer::kPositionFieldNumber;
const int PBPlayer::kForceFieldNumber;
const int PBPlayer::kNameFieldNumber;
const int PBPlayer::kTeamFieldNumber;
const int PBPlayer::kSpeedScaleFieldNumber;
const int PBPlayer::kIdFieldNumber;
const int PBPlayer::kKickMultiplierFieldNumber;
const int PBPlayer::kSpeedMultiplierFieldNumber;
#endif  // !_MSC_VER

PBPlayer::PBPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBPlayer)
}

void PBPlayer::InitAsDefaultInstance() {
  position_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
  force_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
}

PBPlayer::PBPlayer(const PBPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBPlayer)
}

void PBPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = NULL;
  force_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0;
  speedscale_ = 0;
  id_ = 0;
  kickmultiplier_ = 0;
  speedmultiplier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayer::~PBPlayer() {
  // @@protoc_insertion_point(destructor:PBPlayer)
  SharedDtor();
}

void PBPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete force_;
  }
}

void PBPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayer_descriptor_;
}

const PBPlayer& PBPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBPlayer* PBPlayer::default_instance_ = NULL;

PBPlayer* PBPlayer::New() const {
  return new PBPlayer;
}

void PBPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(team_, speedmultiplier_);
    if (has_position()) {
      if (position_ != NULL) position_->::PBVec2::Clear();
    }
    if (has_force()) {
      if (force_ != NULL) force_->::PBVec2::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBVec2 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_force;
        break;
      }

      // optional .PBVec2 force = 2;
      case 2: {
        if (tag == 18) {
         parse_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional .PBTeam team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBTeam_IsValid(value)) {
            set_team(static_cast< ::PBTeam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speedScale;
        break;
      }

      // optional float speedScale = 5;
      case 5: {
        if (tag == 45) {
         parse_speedScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedscale_)));
          set_has_speedscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional int32 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_kickMultiplier;
        break;
      }

      // optional float kickMultiplier = 7;
      case 7: {
        if (tag == 61) {
         parse_kickMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickmultiplier_)));
          set_has_kickmultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_speedMultiplier;
        break;
      }

      // optional float speedMultiplier = 8;
      case 8: {
        if (tag == 69) {
         parse_speedMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedmultiplier_)));
          set_has_speedmultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBPlayer)
  return false;
#undef DO_
}

void PBPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBPlayer)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .PBVec2 force = 2;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->force(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .PBTeam team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team(), output);
  }

  // optional float speedScale = 5;
  if (has_speedscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speedscale(), output);
  }

  // optional int32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  // optional float kickMultiplier = 7;
  if (has_kickmultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->kickmultiplier(), output);
  }

  // optional float speedMultiplier = 8;
  if (has_speedmultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speedmultiplier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBPlayer)
}

::google::protobuf::uint8* PBPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBPlayer)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .PBVec2 force = 2;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->force(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .PBTeam team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team(), target);
  }

  // optional float speedScale = 5;
  if (has_speedscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speedscale(), target);
  }

  // optional int32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  // optional float kickMultiplier = 7;
  if (has_kickmultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->kickmultiplier(), target);
  }

  // optional float speedMultiplier = 8;
  if (has_speedmultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speedmultiplier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBPlayer)
  return target;
}

int PBPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBVec2 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .PBVec2 force = 2;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->force());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PBTeam team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional float speedScale = 5;
    if (has_speedscale()) {
      total_size += 1 + 4;
    }

    // optional int32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional float kickMultiplier = 7;
    if (has_kickmultiplier()) {
      total_size += 1 + 4;
    }

    // optional float speedMultiplier = 8;
    if (has_speedmultiplier()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayer::MergeFrom(const PBPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::PBVec2::MergeFrom(from.position());
    }
    if (from.has_force()) {
      mutable_force()->::PBVec2::MergeFrom(from.force());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_speedscale()) {
      set_speedscale(from.speedscale());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kickmultiplier()) {
      set_kickmultiplier(from.kickmultiplier());
    }
    if (from.has_speedmultiplier()) {
      set_speedmultiplier(from.speedmultiplier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayer::CopyFrom(const PBPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayer::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_force()) {
    if (!this->force().IsInitialized()) return false;
  }
  return true;
}

void PBPlayer::Swap(PBPlayer* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(force_, other->force_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(speedscale_, other->speedscale_);
    std::swap(id_, other->id_);
    std::swap(kickmultiplier_, other->kickmultiplier_);
    std::swap(speedmultiplier_, other->speedmultiplier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayer_descriptor_;
  metadata.reflection = PBPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBonus::kIdFieldNumber;
const int PBBonus::kResFieldNumber;
const int PBBonus::kPositionFieldNumber;
const int PBBonus::kNameFieldNumber;
#endif  // !_MSC_VER

PBBonus::PBBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBonus)
}

void PBBonus::InitAsDefaultInstance() {
  position_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
}

PBBonus::PBBonus(const PBBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBonus)
}

void PBBonus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBonus::~PBBonus() {
  // @@protoc_insertion_point(destructor:PBBonus)
  SharedDtor();
}

void PBBonus::SharedDtor() {
  if (res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete res_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void PBBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBonus_descriptor_;
}

const PBBonus& PBBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBBonus* PBBonus::default_instance_ = NULL;

PBBonus* PBBonus::New() const {
  return new PBBonus;
}

void PBBonus::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        res_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::PBVec2::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional string res = 2;
      case 2: {
        if (tag == 18) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res().data(), this->res().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "res");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .PBVec2 position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBonus)
  return false;
#undef DO_
}

void PBBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBonus)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->res(), output);
  }

  // optional .PBVec2 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBonus)
}

::google::protobuf::uint8* PBBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBonus)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->res(), target);
  }

  // optional .PBVec2 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBonus)
  return target;
}

int PBBonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // optional .PBVec2 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBonus::MergeFrom(const PBBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_position()) {
      mutable_position()->::PBVec2::MergeFrom(from.position());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBonus::CopyFrom(const PBBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBonus::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void PBBonus::Swap(PBBonus* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(res_, other->res_);
    std::swap(position_, other->position_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBonus_descriptor_;
  metadata.reflection = PBBonus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
