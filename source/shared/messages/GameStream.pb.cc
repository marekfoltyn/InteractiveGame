// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameStream.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameStream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBGameStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGameStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBVec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBVec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBTeam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameStream_2eproto() {
  protobuf_AddDesc_GameStream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameStream.proto");
  GOOGLE_CHECK(file != NULL);
  PBGameStream_descriptor_ = file->message_type(0);
  static const int PBGameStream_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, pitchratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, player_),
  };
  PBGameStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGameStream_descriptor_,
      PBGameStream::default_instance_,
      PBGameStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGameStream));
  PBVec2_descriptor_ = file->message_type(1);
  static const int PBVec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, y_),
  };
  PBVec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBVec2_descriptor_,
      PBVec2::default_instance_,
      PBVec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBVec2));
  PBBall_descriptor_ = file->message_type(2);
  static const int PBBall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, playerenabled_),
  };
  PBBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBall_descriptor_,
      PBBall::default_instance_,
      PBBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBall));
  PBPlayer_descriptor_ = file->message_type(3);
  static const int PBPlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, connected_),
  };
  PBPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayer_descriptor_,
      PBPlayer::default_instance_,
      PBPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayer));
  PBTeam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameStream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGameStream_descriptor_, &PBGameStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBVec2_descriptor_, &PBVec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBall_descriptor_, &PBBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayer_descriptor_, &PBPlayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameStream_2eproto() {
  delete PBGameStream::default_instance_;
  delete PBGameStream_reflection_;
  delete PBVec2::default_instance_;
  delete PBVec2_reflection_;
  delete PBBall::default_instance_;
  delete PBBall_reflection_;
  delete PBPlayer::default_instance_;
  delete PBPlayer_reflection_;
}

void protobuf_AddDesc_GameStream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameStream.proto\"d\n\014PBGameStream\022\016\n\006ac"
    "tive\030\001 \001(\010\022\022\n\npitchRatio\030\002 \001(\001\022\025\n\004ball\030\003"
    " \001(\0132\007.PBBall\022\031\n\006player\030\004 \003(\0132\t.PBPlayer"
    "\"\036\n\006PBVec2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"f\n\006PBBa"
    "ll\022\031\n\010position\030\001 \001(\0132\007.PBVec2\022\031\n\010velocit"
    "y\030\002 \001(\0132\007.PBVec2\022\017\n\007visible\030\003 \001(\010\022\025\n\rpla"
    "yerEnabled\030\004 \001(\010\"x\n\010PBPlayer\022\031\n\010position"
    "\030\001 \001(\0132\007.PBVec2\022\031\n\010velocity\030\002 \001(\0132\007.PBVe"
    "c2\022\014\n\004name\030\003 \001(\t\022\025\n\004team\030\004 \001(\0162\007.PBTeam\022"
    "\021\n\tconnected\030\005 \001(\010*\033\n\006PBTeam\022\007\n\003RED\020\000\022\010\n"
    "\004BLUE\020\001", 407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameStream.proto", &protobuf_RegisterTypes);
  PBGameStream::default_instance_ = new PBGameStream();
  PBVec2::default_instance_ = new PBVec2();
  PBBall::default_instance_ = new PBBall();
  PBPlayer::default_instance_ = new PBPlayer();
  PBGameStream::default_instance_->InitAsDefaultInstance();
  PBVec2::default_instance_->InitAsDefaultInstance();
  PBBall::default_instance_->InitAsDefaultInstance();
  PBPlayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameStream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameStream_2eproto {
  StaticDescriptorInitializer_GameStream_2eproto() {
    protobuf_AddDesc_GameStream_2eproto();
  }
} static_descriptor_initializer_GameStream_2eproto_;
const ::google::protobuf::EnumDescriptor* PBTeam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeam_descriptor_;
}
bool PBTeam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PBGameStream::kActiveFieldNumber;
const int PBGameStream::kPitchRatioFieldNumber;
const int PBGameStream::kBallFieldNumber;
const int PBGameStream::kPlayerFieldNumber;
#endif  // !_MSC_VER

PBGameStream::PBGameStream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGameStream)
}

void PBGameStream::InitAsDefaultInstance() {
  ball_ = const_cast< ::PBBall*>(&::PBBall::default_instance());
}

PBGameStream::PBGameStream(const PBGameStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBGameStream)
}

void PBGameStream::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  pitchratio_ = 0;
  ball_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGameStream::~PBGameStream() {
  // @@protoc_insertion_point(destructor:PBGameStream)
  SharedDtor();
}

void PBGameStream::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void PBGameStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGameStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGameStream_descriptor_;
}

const PBGameStream& PBGameStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBGameStream* PBGameStream::default_instance_ = NULL;

PBGameStream* PBGameStream::New() const {
  return new PBGameStream;
}

void PBGameStream::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    active_ = false;
    pitchratio_ = 0;
    if (has_ball()) {
      if (ball_ != NULL) ball_->::PBBall::Clear();
    }
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGameStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGameStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_pitchRatio;
        break;
      }

      // optional double pitchRatio = 2;
      case 2: {
        if (tag == 17) {
         parse_pitchRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchratio_)));
          set_has_pitchratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ball;
        break;
      }

      // optional .PBBall ball = 3;
      case 3: {
        if (tag == 26) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player;
        break;
      }

      // repeated .PBPlayer player = 4;
      case 4: {
        if (tag == 34) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGameStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGameStream)
  return false;
#undef DO_
}

void PBGameStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGameStream)
  // optional bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional double pitchRatio = 2;
  if (has_pitchratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitchratio(), output);
  }

  // optional .PBBall ball = 3;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ball(), output);
  }

  // repeated .PBPlayer player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBGameStream)
}

::google::protobuf::uint8* PBGameStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGameStream)
  // optional bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional double pitchRatio = 2;
  if (has_pitchratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitchratio(), target);
  }

  // optional .PBBall ball = 3;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ball(), target);
  }

  // repeated .PBPlayer player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBGameStream)
  return target;
}

int PBGameStream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional double pitchRatio = 2;
    if (has_pitchratio()) {
      total_size += 1 + 8;
    }

    // optional .PBBall ball = 3;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

  }
  // repeated .PBPlayer player = 4;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGameStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGameStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGameStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGameStream::MergeFrom(const PBGameStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_pitchratio()) {
      set_pitchratio(from.pitchratio());
    }
    if (from.has_ball()) {
      mutable_ball()->::PBBall::MergeFrom(from.ball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGameStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGameStream::CopyFrom(const PBGameStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGameStream::IsInitialized() const {

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->player())) return false;
  return true;
}

void PBGameStream::Swap(PBGameStream* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(pitchratio_, other->pitchratio_);
    std::swap(ball_, other->ball_);
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGameStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGameStream_descriptor_;
  metadata.reflection = PBGameStream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBVec2::kXFieldNumber;
const int PBVec2::kYFieldNumber;
#endif  // !_MSC_VER

PBVec2::PBVec2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBVec2)
}

void PBVec2::InitAsDefaultInstance() {
}

PBVec2::PBVec2(const PBVec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBVec2)
}

void PBVec2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBVec2::~PBVec2() {
  // @@protoc_insertion_point(destructor:PBVec2)
  SharedDtor();
}

void PBVec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBVec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBVec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBVec2_descriptor_;
}

const PBVec2& PBVec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBVec2* PBVec2::default_instance_ = NULL;

PBVec2* PBVec2::New() const {
  return new PBVec2;
}

void PBVec2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBVec2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBVec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBVec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBVec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBVec2)
  return false;
#undef DO_
}

void PBVec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBVec2)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBVec2)
}

::google::protobuf::uint8* PBVec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBVec2)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBVec2)
  return target;
}

int PBVec2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBVec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBVec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBVec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBVec2::MergeFrom(const PBVec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBVec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBVec2::CopyFrom(const PBVec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBVec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBVec2::Swap(PBVec2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBVec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBVec2_descriptor_;
  metadata.reflection = PBVec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBall::kPositionFieldNumber;
const int PBBall::kVelocityFieldNumber;
const int PBBall::kVisibleFieldNumber;
const int PBBall::kPlayerEnabledFieldNumber;
#endif  // !_MSC_VER

PBBall::PBBall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBBall)
}

void PBBall::InitAsDefaultInstance() {
  position_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
  velocity_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
}

PBBall::PBBall(const PBBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBBall)
}

void PBBall::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  visible_ = false;
  playerenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBall::~PBBall() {
  // @@protoc_insertion_point(destructor:PBBall)
  SharedDtor();
}

void PBBall::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void PBBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBall_descriptor_;
}

const PBBall& PBBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBBall* PBBall::default_instance_ = NULL;

PBBall* PBBall::New() const {
  return new PBBall;
}

void PBBall::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBBall*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(visible_, playerenabled_);
    if (has_position()) {
      if (position_ != NULL) position_->::PBVec2::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::PBVec2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBVec2 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // optional .PBVec2 velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_visible;
        break;
      }

      // optional bool visible = 3;
      case 3: {
        if (tag == 24) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerEnabled;
        break;
      }

      // optional bool playerEnabled = 4;
      case 4: {
        if (tag == 32) {
         parse_playerEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playerenabled_)));
          set_has_playerenabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBBall)
  return false;
#undef DO_
}

void PBBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBBall)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .PBVec2 velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->velocity(), output);
  }

  // optional bool visible = 3;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->visible(), output);
  }

  // optional bool playerEnabled = 4;
  if (has_playerenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->playerenabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBBall)
}

::google::protobuf::uint8* PBBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBBall)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .PBVec2 velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->velocity(), target);
  }

  // optional bool visible = 3;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->visible(), target);
  }

  // optional bool playerEnabled = 4;
  if (has_playerenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->playerenabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBBall)
  return target;
}

int PBBall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBVec2 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .PBVec2 velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional bool visible = 3;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool playerEnabled = 4;
    if (has_playerenabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBall::MergeFrom(const PBBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::PBVec2::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::PBVec2::MergeFrom(from.velocity());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_playerenabled()) {
      set_playerenabled(from.playerenabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBall::CopyFrom(const PBBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBall::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void PBBall::Swap(PBBall* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(visible_, other->visible_);
    std::swap(playerenabled_, other->playerenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBall_descriptor_;
  metadata.reflection = PBBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayer::kPositionFieldNumber;
const int PBPlayer::kVelocityFieldNumber;
const int PBPlayer::kNameFieldNumber;
const int PBPlayer::kTeamFieldNumber;
const int PBPlayer::kConnectedFieldNumber;
#endif  // !_MSC_VER

PBPlayer::PBPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBPlayer)
}

void PBPlayer::InitAsDefaultInstance() {
  position_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
  velocity_ = const_cast< ::PBVec2*>(&::PBVec2::default_instance());
}

PBPlayer::PBPlayer(const PBPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBPlayer)
}

void PBPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0;
  connected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayer::~PBPlayer() {
  // @@protoc_insertion_point(destructor:PBPlayer)
  SharedDtor();
}

void PBPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void PBPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayer_descriptor_;
}

const PBPlayer& PBPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStream_2eproto();
  return *default_instance_;
}

PBPlayer* PBPlayer::default_instance_ = NULL;

PBPlayer* PBPlayer::New() const {
  return new PBPlayer;
}

void PBPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(team_, connected_);
    if (has_position()) {
      if (position_ != NULL) position_->::PBVec2::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::PBVec2::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBVec2 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // optional .PBVec2 velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional .PBTeam team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBTeam_IsValid(value)) {
            set_team(static_cast< ::PBTeam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_connected;
        break;
      }

      // optional bool connected = 5;
      case 5: {
        if (tag == 40) {
         parse_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
          set_has_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBPlayer)
  return false;
#undef DO_
}

void PBPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBPlayer)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .PBVec2 velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->velocity(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .PBTeam team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team(), output);
  }

  // optional bool connected = 5;
  if (has_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->connected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBPlayer)
}

::google::protobuf::uint8* PBPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBPlayer)
  // optional .PBVec2 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .PBVec2 velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->velocity(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .PBTeam team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team(), target);
  }

  // optional bool connected = 5;
  if (has_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->connected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBPlayer)
  return target;
}

int PBPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBVec2 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .PBVec2 velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PBTeam team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional bool connected = 5;
    if (has_connected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayer::MergeFrom(const PBPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::PBVec2::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::PBVec2::MergeFrom(from.velocity());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_connected()) {
      set_connected(from.connected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayer::CopyFrom(const PBPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayer::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void PBPlayer::Swap(PBPlayer* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(connected_, other->connected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayer_descriptor_;
  metadata.reflection = PBPlayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
