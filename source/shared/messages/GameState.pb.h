// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/GameState.proto

#ifndef PROTOBUF_protobuf_2fGameState_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fGameState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fGameState_2eproto();
void protobuf_AssignDesc_protobuf_2fGameState_2eproto();
void protobuf_ShutdownFile_protobuf_2fGameState_2eproto();

class GameState;

enum GameState_PitchSize {
  GameState_PitchSize_SIZE_SMALL = 0,
  GameState_PitchSize_SIZE_MEDIUM = 1,
  GameState_PitchSize_SIZE_BIG = 2
};
bool GameState_PitchSize_IsValid(int value);
const GameState_PitchSize GameState_PitchSize_PitchSize_MIN = GameState_PitchSize_SIZE_SMALL;
const GameState_PitchSize GameState_PitchSize_PitchSize_MAX = GameState_PitchSize_SIZE_BIG;
const int GameState_PitchSize_PitchSize_ARRAYSIZE = GameState_PitchSize_PitchSize_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_PitchSize_descriptor();
inline const ::std::string& GameState_PitchSize_Name(GameState_PitchSize value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_PitchSize_descriptor(), value);
}
inline bool GameState_PitchSize_Parse(
    const ::std::string& name, GameState_PitchSize* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_PitchSize>(
    GameState_PitchSize_descriptor(), name, value);
}
enum GameState_MatchDuration {
  GameState_MatchDuration_DURATION_SHORT = 0,
  GameState_MatchDuration_DURATION_MEDIUM = 1,
  GameState_MatchDuration_DURATION_LONG = 2
};
bool GameState_MatchDuration_IsValid(int value);
const GameState_MatchDuration GameState_MatchDuration_MatchDuration_MIN = GameState_MatchDuration_DURATION_SHORT;
const GameState_MatchDuration GameState_MatchDuration_MatchDuration_MAX = GameState_MatchDuration_DURATION_LONG;
const int GameState_MatchDuration_MatchDuration_ARRAYSIZE = GameState_MatchDuration_MatchDuration_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_MatchDuration_descriptor();
inline const ::std::string& GameState_MatchDuration_Name(GameState_MatchDuration value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_MatchDuration_descriptor(), value);
}
inline bool GameState_MatchDuration_Parse(
    const ::std::string& name, GameState_MatchDuration* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_MatchDuration>(
    GameState_MatchDuration_descriptor(), name, value);
}
enum GameState_State {
  GameState_State_STATE_LOBBY = 0,
  GameState_State_STATE_RUNNING = 1,
  GameState_State_STATE_PAUSED = 2
};
bool GameState_State_IsValid(int value);
const GameState_State GameState_State_State_MIN = GameState_State_STATE_LOBBY;
const GameState_State GameState_State_State_MAX = GameState_State_STATE_PAUSED;
const int GameState_State_State_ARRAYSIZE = GameState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_State_descriptor();
inline const ::std::string& GameState_State_Name(GameState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_State_descriptor(), value);
}
inline bool GameState_State_Parse(
    const ::std::string& name, GameState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_State>(
    GameState_State_descriptor(), name, value);
}
// ===================================================================

class GameState : public ::google::protobuf::Message {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  void Swap(GameState* other);

  // implements Message ----------------------------------------------

  GameState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GameState_PitchSize PitchSize;
  static const PitchSize SIZE_SMALL = GameState_PitchSize_SIZE_SMALL;
  static const PitchSize SIZE_MEDIUM = GameState_PitchSize_SIZE_MEDIUM;
  static const PitchSize SIZE_BIG = GameState_PitchSize_SIZE_BIG;
  static inline bool PitchSize_IsValid(int value) {
    return GameState_PitchSize_IsValid(value);
  }
  static const PitchSize PitchSize_MIN =
    GameState_PitchSize_PitchSize_MIN;
  static const PitchSize PitchSize_MAX =
    GameState_PitchSize_PitchSize_MAX;
  static const int PitchSize_ARRAYSIZE =
    GameState_PitchSize_PitchSize_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PitchSize_descriptor() {
    return GameState_PitchSize_descriptor();
  }
  static inline const ::std::string& PitchSize_Name(PitchSize value) {
    return GameState_PitchSize_Name(value);
  }
  static inline bool PitchSize_Parse(const ::std::string& name,
      PitchSize* value) {
    return GameState_PitchSize_Parse(name, value);
  }

  typedef GameState_MatchDuration MatchDuration;
  static const MatchDuration DURATION_SHORT = GameState_MatchDuration_DURATION_SHORT;
  static const MatchDuration DURATION_MEDIUM = GameState_MatchDuration_DURATION_MEDIUM;
  static const MatchDuration DURATION_LONG = GameState_MatchDuration_DURATION_LONG;
  static inline bool MatchDuration_IsValid(int value) {
    return GameState_MatchDuration_IsValid(value);
  }
  static const MatchDuration MatchDuration_MIN =
    GameState_MatchDuration_MatchDuration_MIN;
  static const MatchDuration MatchDuration_MAX =
    GameState_MatchDuration_MatchDuration_MAX;
  static const int MatchDuration_ARRAYSIZE =
    GameState_MatchDuration_MatchDuration_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchDuration_descriptor() {
    return GameState_MatchDuration_descriptor();
  }
  static inline const ::std::string& MatchDuration_Name(MatchDuration value) {
    return GameState_MatchDuration_Name(value);
  }
  static inline bool MatchDuration_Parse(const ::std::string& name,
      MatchDuration* value) {
    return GameState_MatchDuration_Parse(name, value);
  }

  typedef GameState_State State;
  static const State STATE_LOBBY = GameState_State_STATE_LOBBY;
  static const State STATE_RUNNING = GameState_State_STATE_RUNNING;
  static const State STATE_PAUSED = GameState_State_STATE_PAUSED;
  static inline bool State_IsValid(int value) {
    return GameState_State_IsValid(value);
  }
  static const State State_MIN =
    GameState_State_State_MIN;
  static const State State_MAX =
    GameState_State_State_MAX;
  static const int State_ARRAYSIZE =
    GameState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return GameState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return GameState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return GameState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .GameState.MatchDuration duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::GameState_MatchDuration duration() const;
  inline void set_duration(::GameState_MatchDuration value);

  // optional .GameState.PitchSize pitchSize = 3;
  inline bool has_pitchsize() const;
  inline void clear_pitchsize();
  static const int kPitchSizeFieldNumber = 3;
  inline ::GameState_PitchSize pitchsize() const;
  inline void set_pitchsize(::GameState_PitchSize value);

  // optional .GameState.State state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::GameState_State state() const;
  inline void set_state(::GameState_State value);

  // @@protoc_insertion_point(class_scope:GameState)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_pitchsize();
  inline void clear_has_pitchsize();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int duration_;
  int pitchsize_;
  int state_;
  friend void  protobuf_AddDesc_protobuf_2fGameState_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fGameState_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fGameState_2eproto();

  void InitAsDefaultInstance();
  static GameState* default_instance_;
};
// ===================================================================


// ===================================================================

// GameState

// optional string name = 1;
inline bool GameState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameState::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GameState::name() const {
  // @@protoc_insertion_point(field_get:GameState.name)
  return *name_;
}
inline void GameState::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GameState.name)
}
inline void GameState::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GameState.name)
}
inline void GameState::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GameState.name)
}
inline ::std::string* GameState::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GameState.name)
  return name_;
}
inline ::std::string* GameState::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameState::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GameState.name)
}

// optional .GameState.MatchDuration duration = 2;
inline bool GameState::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameState::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameState::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameState::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::GameState_MatchDuration GameState::duration() const {
  // @@protoc_insertion_point(field_get:GameState.duration)
  return static_cast< ::GameState_MatchDuration >(duration_);
}
inline void GameState::set_duration(::GameState_MatchDuration value) {
  assert(::GameState_MatchDuration_IsValid(value));
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:GameState.duration)
}

// optional .GameState.PitchSize pitchSize = 3;
inline bool GameState::has_pitchsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameState::set_has_pitchsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameState::clear_has_pitchsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameState::clear_pitchsize() {
  pitchsize_ = 0;
  clear_has_pitchsize();
}
inline ::GameState_PitchSize GameState::pitchsize() const {
  // @@protoc_insertion_point(field_get:GameState.pitchSize)
  return static_cast< ::GameState_PitchSize >(pitchsize_);
}
inline void GameState::set_pitchsize(::GameState_PitchSize value) {
  assert(::GameState_PitchSize_IsValid(value));
  set_has_pitchsize();
  pitchsize_ = value;
  // @@protoc_insertion_point(field_set:GameState.pitchSize)
}

// optional .GameState.State state = 4;
inline bool GameState::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameState::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameState::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::GameState_State GameState::state() const {
  // @@protoc_insertion_point(field_get:GameState.state)
  return static_cast< ::GameState_State >(state_);
}
inline void GameState::set_state(::GameState_State value) {
  assert(::GameState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:GameState.state)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameState_PitchSize> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameState_PitchSize>() {
  return ::GameState_PitchSize_descriptor();
}
template <> struct is_proto_enum< ::GameState_MatchDuration> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameState_MatchDuration>() {
  return ::GameState_MatchDuration_descriptor();
}
template <> struct is_proto_enum< ::GameState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameState_State>() {
  return ::GameState_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fGameState_2eproto__INCLUDED
